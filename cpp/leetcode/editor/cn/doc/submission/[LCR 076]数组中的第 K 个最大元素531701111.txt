class Solution:
    def findKthLargest(self, nums: List[int], k: int) -> int:

        _k = len(nums) - k
        print('k', k, '_k', _k)

        def dfs(left, right) -> int:

            # print(nums, '==>', left, right - 1, '[', nums[left], nums[right - 1], ']', nums[left:right])
            pIndex = (left + right) // 2
            # print(left, pIndex, right)
            if pIndex == left:
                return nums[pIndex]
            # if pIndex == _k:
            #     return nums[pIndex]
            # print('pIndex', pIndex, nums[pIndex])
            left_array = []
            right_array = []
            mid_array = []
            for i in range(left, right):
                if nums[i] < nums[pIndex]:
                    left_array.append(nums[i])
                    continue
                if nums[i] > nums[pIndex]:
                    right_array.append(nums[i])
                    continue
                mid_array.append(nums[i])
            tmp = left_array + mid_array + right_array

            for i in range(len(tmp)):
                nums[left + i] = tmp[i]

            # print(left, right)
            # print(left_array, mid_array, right_array)
            # print(nums)
            mid_min = left + len(left_array)
            mid_max = mid_min + len(mid_array) - 1
            # print('mid', mid, nums[mid], nums, '_k', _k)
            # print(mid, _k, mid + len(mid_array), '||||', nums[mid], nums[_k], nums[mid + len(mid_array)])
            if mid_min <= _k <= mid_max:
                return nums[mid_min]
            if mid_max < _k:
                return dfs(mid_max + 1, right)
            else:
                return dfs(left, mid_min)

        return dfs(0, len(nums))


# runtime:45 ms
# memory:18 MB
