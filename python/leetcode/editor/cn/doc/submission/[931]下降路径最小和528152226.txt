class Solution:
    def minFallingPathSum(self, matrix: List[List[int]]) -> int:
        self.res = 0
        self.min = sys.maxsize
        for i in range(len(matrix[0])):
            self.minFallingPathSumHelper(matrix, 0, i)
        return self.min

    def minFallingPathSumHelper(self, matrix: List[List[int]], row: int, col: int):
        if col < 0:
            return
        if col >= len(matrix[0]):
            return
        if row >= len(matrix):
            # print(self.res)
            self.min = min(self.min, self.res)
            # print(self.min)
            return

            # self.res.append(matrix[row][col])
        self.res += matrix[row][col]
        if self.res >= self.min:
            self.res -= matrix[row][col]
            return
        self.minFallingPathSumHelper(matrix, row + 1, col - 1)
        self.minFallingPathSumHelper(matrix, row + 1, col)
        self.minFallingPathSumHelper(matrix, row + 1, col + 1)
        self.res -= matrix[row][col]



# total_testcases:52
# total_correct:13
# input_formatted:[[51,24],[-50,82]]
# expected_output:-26
# code_output:1
# last_testcase:[[51,24],[-50,82]]
