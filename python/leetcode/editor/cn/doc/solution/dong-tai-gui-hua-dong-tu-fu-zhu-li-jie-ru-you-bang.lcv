最长递增子序列$(LIS):Longest Increasing Subsequence$

## 思路

- 我们需要定义两个`vector数组`：

  - vector<int> dp(n,1): 表示以$nums[i]$结尾的$LIS$长度
  - vector<int> count(n,1): 表示以$nums[i]$结尾的$LIS$的组合的个数

  这里两个数组全部初始化为$1$,显然当序列长度为$1$时,$LIS$的长度为$1$,并且所有$LIS$的个数至少为$1$(不可能为零)

- 两重循环遍历

  - 第一重用`i`扫描`(1 <= i < nums.size())`
  - 第二重用`j`扫描`(0 <= j < i)`

  显然 `j` 永远小于 `i`

- 若要$LIS$成立，我们只要考虑$nums[j] < nums[i]$的情况，其他情况则不考虑
  - (1)当`dp[j]+1 > dp[i]`时,意味着我们第一次找到这个组合
  - (2)当`dp[j]+1 == dp[i]`时,意味着我们不是第一次找到这个组合

  这两句话可能有点难理解,希望下面的动图可以帮助到你

  <![幻灯片1.JPG](https://pic.leetcode-cn.com/1620634447-qDQyal-%E5%B9%BB%E7%81%AF%E7%89%871.JPG),![幻灯片2.JPG](https://pic.leetcode-cn.com/1620634468-yZANyN-%E5%B9%BB%E7%81%AF%E7%89%872.JPG),![幻灯片3.JPG](https://pic.leetcode-cn.com/1620634472-Ccwmld-%E5%B9%BB%E7%81%AF%E7%89%873.JPG),![幻灯片4.JPG](https://pic.leetcode-cn.com/1620634477-HfkkYz-%E5%B9%BB%E7%81%AF%E7%89%874.JPG),![幻灯片5.JPG](https://pic.leetcode-cn.com/1620634481-FJFTel-%E5%B9%BB%E7%81%AF%E7%89%875.JPG),![幻灯片6.JPG](https://pic.leetcode-cn.com/1620634484-AqKMCA-%E5%B9%BB%E7%81%AF%E7%89%876.JPG),![幻灯片7.JPG](https://pic.leetcode-cn.com/1620634487-tkwFWw-%E5%B9%BB%E7%81%AF%E7%89%877.JPG),![幻灯片8.JPG](https://pic.leetcode-cn.com/1620634490-rVNpZH-%E5%B9%BB%E7%81%AF%E7%89%878.JPG),![幻灯片9.JPG](https://pic.leetcode-cn.com/1620634494-KmmNQc-%E5%B9%BB%E7%81%AF%E7%89%879.JPG),![幻灯片10.JPG](https://pic.leetcode-cn.com/1620634498-vhBnBm-%E5%B9%BB%E7%81%AF%E7%89%8710.JPG),![幻灯片11.JPG](https://pic.leetcode-cn.com/1620634501-WeMznB-%E5%B9%BB%E7%81%AF%E7%89%8711.JPG),![幻灯片12.JPG](https://pic.leetcode-cn.com/1620634506-uFOLes-%E5%B9%BB%E7%81%AF%E7%89%8712.JPG),![幻灯片13.JPG](https://pic.leetcode-cn.com/1620634511-aFSmZz-%E5%B9%BB%E7%81%AF%E7%89%8713.JPG),![幻灯片14.JPG](https://pic.leetcode-cn.com/1620634514-nsEdSo-%E5%B9%BB%E7%81%AF%E7%89%8714.JPG),![幻灯片15.JPG](https://pic.leetcode-cn.com/1620634517-iBflMW-%E5%B9%BB%E7%81%AF%E7%89%8715.JPG),![幻灯片16.JPG](https://pic.leetcode-cn.com/1620634521-fSySes-%E5%B9%BB%E7%81%AF%E7%89%8716.JPG),![幻灯片17.JPG](https://pic.leetcode-cn.com/1620634526-NshSBL-%E5%B9%BB%E7%81%AF%E7%89%8717.JPG),![幻灯片18.JPG](https://pic.leetcode-cn.com/1620634529-jrPoPA-%E5%B9%BB%E7%81%AF%E7%89%8718.JPG),![幻灯片19.JPG](https://pic.leetcode-cn.com/1620634532-fUjgoi-%E5%B9%BB%E7%81%AF%E7%89%8719.JPG),![幻灯片20.JPG](https://pic.leetcode-cn.com/1620634536-zklPLl-%E5%B9%BB%E7%81%AF%E7%89%8720.JPG),![幻灯片21.JPG](https://pic.leetcode-cn.com/1620634539-LPmwEz-%E5%B9%BB%E7%81%AF%E7%89%8721.JPG),![幻灯片22.JPG](https://pic.leetcode-cn.com/1620634543-OJduAj-%E5%B9%BB%E7%81%AF%E7%89%8722.JPG),![幻灯片23.JPG](https://pic.leetcode-cn.com/1620634546-BvBSTR-%E5%B9%BB%E7%81%AF%E7%89%8723.JPG),![幻灯片24.JPG](https://pic.leetcode-cn.com/1620634549-cxtJYs-%E5%B9%BB%E7%81%AF%E7%89%8724.JPG),![幻灯片25.JPG](https://pic.leetcode-cn.com/1620634553-wLkEKH-%E5%B9%BB%E7%81%AF%E7%89%8725.JPG),![幻灯片26.JPG](https://pic.leetcode-cn.com/1620634556-joLQqT-%E5%B9%BB%E7%81%AF%E7%89%8726.JPG),![幻灯片27.JPG](https://pic.leetcode-cn.com/1620634559-zlCjHS-%E5%B9%BB%E7%81%AF%E7%89%8727.JPG),![幻灯片28.JPG](https://pic.leetcode-cn.com/1620634562-mVDYow-%E5%B9%BB%E7%81%AF%E7%89%8728.JPG),![幻灯片29.JPG](https://pic.leetcode-cn.com/1620634566-QrYpYg-%E5%B9%BB%E7%81%AF%E7%89%8729.JPG)>

当我们遇到情况(1)时(`dp[j]+1 > dp[i]`),只需要将$LIS$的长度加一，并且将组合数设为与$nums[j]$一样即可

当我们遇到情况(2)时(`dp[j]+1 == dp[i]`),只需要将$nums[j]$的组合数添加上去即可

**注意以上两种情况都是基于(nums[j] < nums[i])**

最后我们返回所有$LIS$的所有组合数

### 代码

* C++

```C++
class Solution {
public:
    int findNumberOfLIS(vector<int>& nums) {

        int n = nums.size();
        if(n<=0) return n;

        vector<int> dp(n, 1);
        vector<int> count(n,1);

        for(int i=1; i<n; i++) {
            for(int j=0; j<i; j++) {
                if(nums[j] < nums[i]) {
                    // 第一次找到
                    if(dp[j]+1 > dp[i]) {
                        dp[i] = dp[j] + 1;
                        count[i] = count[j];
                    // 再次找到
                    } else if(dp[j]+1 == dp[i]) {
                        count[i] += count[j];
                    }
                }
            }
        }
        // 最后的返回值应该是所有最大长度的所有count的总和
        int max = *max_element(dp.begin(), dp.end());
        int res = 0;
        for(int i=0; i<n; i++) {
            if(dp[i] == max)
                res += count[i];
        }

        return res;

    }
};
```

