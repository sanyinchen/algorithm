class Solution:
    def findKthLargest(self, nums: List[int], k: int) -> int:

        _k = len(nums) - k
        print('k', k, '_k', _k)

        def dfs(left: int, right: int) -> int:
            if left >= right:
                return
            print(left, right, nums[left:right])
            pIndex = (left + right) // 2
            left_array = []
            right_array = []
            mid_array = []
            for i in range(left, right):
                if nums[i] < nums[pIndex]:
                    left_array.append(nums[i])
                    continue
                if nums[i] > nums[pIndex]:
                    right_array.append(nums[i])
                    continue
                mid_array.append(nums[i])
            tmp = left_array + mid_array + right_array
            print(mid_array, left_array, right_array)
            for i in range(len(tmp)):
                nums[i + left] = tmp[i]
            print(nums)

            dfs(left, pIndex)

            dfs(pIndex + 1, right)

        # if pIndex == _k:
        #     return nums[pIndex]
        # if pIndex > _k:
        #     return
        # else:
        #     return dfs(pIndex + 1, right)

        dfs(0, len(nums))
        print(nums)
        return nums[_k]



# total_testcases:32
# total_correct:24
# input_formatted:[5,2,4,1,3,6,0]
2
# expected_output:5
# code_output:4
# last_testcase:[5,2,4,1,3,6,0]
2
