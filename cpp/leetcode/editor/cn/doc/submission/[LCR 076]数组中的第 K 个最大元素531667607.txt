class Solution:
    def findKthLargest(self, nums: List[int], k: int) -> int:

        _k = len(nums) - k
        print('k', k, '_k', _k)

        def dfs(nums: List[int]) -> List[int]:
            if len(nums) == 0:
                return []
            pIndex = len(nums) // 2
            left_array = []
            right_array = []
            mid_array = []
            for i in range(len(nums)):
                if nums[i] < nums[pIndex]:
                    left_array.append(nums[i])
                    continue
                if nums[i] > nums[pIndex]:
                    right_array.append(nums[i])
                    continue
                mid_array.append(nums[i])
            print(left_array, mid_array, right_array)
            return dfs(left_array) + mid_array + dfs(right_array)

        # if pIndex == _k:
        #     return nums[pIndex]
        # if pIndex > _k:
        #     return
        # else:
        #     return dfs(pIndex + 1, right)

        return dfs(nums)[_k]



# runtime:105 ms
# memory:17.8 MB
